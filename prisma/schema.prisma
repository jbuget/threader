// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Thread {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  scheduledAt DateTime?
  publishedAt DateTime?
  published   Boolean   @default(false)
  versions    Version[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Version {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  data      Json
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  Int
}

model Settings {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
  displayName           String?
  avatarUrl             String?
  blueskyEnabled        Boolean   @default(false)
  blueskyUrl            String?
  blueskyIdentifier     String?
  blueskyPassword       String?
  mastodonEnabled       Boolean   @default(false)
  mastodonUrl           String?
  mastodonAccessToken   String?
  twitterEnabled        Boolean   @default(false)
  twitterConsumerKey    String?
  twitterConsumerSecret String?
  twitterAccessToken    String?
  twitterAccessSecret   String?

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
  settings      Settings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
